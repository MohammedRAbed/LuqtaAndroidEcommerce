package com.example.luqtaecommerce.presentation.main.categories

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.luqtaecommerce.R
import com.example.luqtaecommerce.domain.model.Category
import org.koin.androidx.compose.koinViewModel
import com.example.luqtaecommerce.domain.use_case.Result
import com.example.luqtaecommerce.presentation.auth.signup.CustomButton
import com.example.luqtaecommerce.ui.theme.GrayFont
import com.example.luqtaecommerce.ui.theme.GrayPlaceholder
import com.example.luqtaecommerce.ui.theme.LightPrimary
import com.example.luqtaecommerce.ui.theme.PrimaryCyan


@Composable
fun CategoriesScreen(
    navController: NavController,
    viewModel: CategoriesViewModel = koinViewModel()
) {

    LaunchedEffect(Unit) {
        viewModel.fetchCategories()
    }

    val categoriesState = viewModel.categories.collectAsState().value

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = if (categoriesState is Result.Loading) Arrangement.Center else Arrangement.Top
    ) {

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(
                modifier = Modifier.padding(end = 0.dp),
                onClick = { navController.popBackStack() }
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.back_arrow),
                    contentDescription = "Back"
                )
            }
            Text(
                text = "التصنيفات",
                fontWeight = FontWeight.Medium,
                fontSize = 18.sp
            )
        }

        HorizontalDivider(color = LightPrimary, thickness = 1.dp)

        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = if (categoriesState is Result.Loading) Arrangement.Center else Arrangement.Top
        ) {
            when (categoriesState) {
                is Result.Loading -> {
                    Box(modifier = Modifier.size(40.dp)) {
                        CircularProgressIndicator(color = PrimaryCyan)
                    }
                }
                is Result.Success -> {
                    LazyVerticalGrid(
                        columns = GridCells.Fixed(2),
                        contentPadding = PaddingValues(16.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp),
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        modifier = Modifier.fillMaxSize()
                    ) {
                        items(categoriesState.data) { category ->
                            CategoryItem(category = category) {
                                //navController.navigate("products_screen/${category.slug}")
                            }
                        }
                    }
                }
                is Result.Error -> {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        modifier = Modifier.fillMaxSize()
                    ) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_error),
                            modifier = Modifier.fillMaxWidth(0.7f),
                            contentDescription = "Error"
                        )
                        Text(
                            text = "حدث خطأ أثناء تحميل التصنيفات.",
                            fontWeight = FontWeight.Medium,
                            fontSize = 18.sp
                        )
                        Spacer(modifier = Modifier.height(8.dp))

                        Button(
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color.Black
                            ),
                            onClick = { viewModel.fetchCategories() }
                        ) {
                            Text("إعادة المحاولة")
                            Icon(imageVector = Icons.Filled.Refresh, contentDescription = "Retry")
                        }
                    }
                    Log.e("Categories Error",
                        categoriesState.message ?: categoriesState.exception.localizedMessage
                    )
                    //Text(text = "Error: ${categoriesState.message ?: categoriesState.exception.localizedMessage}")
                }
            }
        }
    }
}

@Composable
fun CategoryItem(category: Category, onClick: () -> Unit) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color.White)
            .border(
                width = 1.dp,
                color = LightPrimary,
                shape = CardDefaults.shape
            )
            .padding(vertical = 22.dp, horizontal = 12.dp)
            .clickable(
                interactionSource = remember { MutableInteractionSource() },
                indication = null, // This is the key: disables ripple and other indications
                onClick = onClick
            ),
        elevation = CardDefaults.cardElevation(),
        shape = RoundedCornerShape(16.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.White),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            // Placeholder for emoji text - you'll need a mapping or a way to get relevant emojis
            // For now, let's use a default or an initial letter.
            val emoji = getEmojiForCategory(category.name)
            Text(
                text = emoji,
                fontSize = 32.sp,
                textAlign = TextAlign.Center,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            Text(
                text = category.name,
                fontSize = 14.sp,
                color = Color.Black,
                fontWeight = FontWeight.SemiBold,
                textAlign = TextAlign.Center
            )
        }
    }
}


// Simple helper function to get an emoji based on category name.
// You might want a more robust mapping or a dedicated resource for this.
fun getEmojiForCategory(categoryName: String): String {
    return when (categoryName) {
        "أثاث" -> "🛋️" // Furniture
        "ملابس" -> "👕" // Clothes
        "إلكترونيات" -> "📱" // Electronics
        "موضة" -> "👜" // Fashion
        "صناعي" -> "🚗" // Industrial (Car for example)
        "ديكور المنزل" -> "🎁" // Home Decor
        "صحة" -> "🩺" // Health
        "عقارات" -> "🏠" // Construction & Real Estate
        "خدمات التصنيع" -> "📏" // Fabrication Service
        "معدات كهربائية" -> "🔌" // Electrical Equipment
        else -> "📦" // Default emoji
    }
}