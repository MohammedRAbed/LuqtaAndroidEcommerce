package com.example.luqtaecommerce.presentation.main.products

import android.util.Log
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.luqtaecommerce.domain.model.Pagination
import com.example.luqtaecommerce.domain.model.Product
import com.example.luqtaecommerce.domain.use_case.product.GetProductsUseCase
import com.example.luqtaecommerce.domain.use_case.Result
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch


data class ProductsUiState(
    val products: List<Product> = emptyList(),
    val pagination: Pagination? = null,
    val isLoading: Boolean = false,
    val isRefreshing: Boolean = false,
    val error: String? = null
)

class ProductsViewModel(
    private val getProductsUseCase: GetProductsUseCase
) : ViewModel() {

    private val _uiState = MutableStateFlow(ProductsUiState(isLoading = true))
    val uiState: StateFlow<ProductsUiState> = _uiState

    private var currentPage = 1
    private var hasMorePages = true


    fun refreshProducts(categorySlug: String? = null) {
        // Prevent multiple refresh operations if one is already in progress
        if (_uiState.value.isRefreshing) return

        _uiState.value = _uiState.value.copy(isRefreshing = true, error = null)
        // Reset pagination for refresh
        currentPage = 1
        hasMorePages = true
        fetchProducts(categorySlug, 1) // Call the internal fetching logic
    }


    private fun fetchProducts(categorySlug: String?, page: Int = 1) {
        if (_uiState.value.isLoading && page != 1) {
            Log.e("DEBUGGING","page: ${page}, isLoading and page!=1")
            return // Prevent duplicate loadMore
        }
        if (!hasMorePages && page != 1) {
            Log.e("DEBUGGING","page: ${page}, !hasMorePages and page!=1")
            return
        }// No more pages to load unless it's a refresh

        currentPage = page
        _uiState.value = _uiState.value.copy(isLoading = true, error = null)

        viewModelScope.launch {
            getProductsUseCase(categorySlug, currentPage, 10).collect { result -> // Fetch 10 items per page
                when (result) {
                    is Result.Loading -> { /* Handled above to prevent flickering, no op here for now */ }

                    is Result.Success -> {
                        val newProducts = result.data.first // List of products
                        val meta = result.data.second      // Meta object

                        val currentProducts = if (currentPage == 1) {
                            newProducts // For first page, replace products
                        } else {
                            _uiState.value.products + newProducts // For subsequent pages, append
                        }

                        hasMorePages = meta.pagination.next != null

                        _uiState.value = _uiState.value.copy(
                            products = currentProducts,
                            pagination = meta.pagination,
                            isLoading = false,
                            isRefreshing = false,
                            error = null
                        )
                    }

                    is Result.Error -> {
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            error = result.message ?: result.exception.localizedMessage
                        )
                    }
                }
            }
        }
    }

    // Initial fetch for the first page
    fun initialFetch(categorySlug: String? = null) {
        fetchProducts(categorySlug, 1)
    }

    fun loadNextPage(categorySlug: String? = null) {
        if (hasMorePages && !_uiState.value.isLoading && !_uiState.value.isRefreshing) {
            fetchProducts(categorySlug, currentPage + 1)
        }
    }
}